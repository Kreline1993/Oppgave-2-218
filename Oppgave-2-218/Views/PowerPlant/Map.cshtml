@{
    ViewData["Title"] = "Power Plant Map";
}

<div class="container-fluid">
    <h1>Power Plant Map</h1>

    <div id="map" style="height: 600px; width: 100%;"></div>
</div>

@section Styles {
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin="" />
}

@section Scripts {
    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>

    <script>
        // Initialize the map centered on Norway
        var map = L.map('map').setView([65.5, 17.0], 5);

        // Add OSM base layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Function to create popup content
        function createPopupContent(feature) {
            const props = feature.properties;
            return `
                <div class="popup-content">
                    <h5>${props.name}</h5>
                    <p><strong>Status:</strong> ${props.status}</p>
                    <p><strong>Effect:</strong> ${props.effect} MW</p>
                    <p><strong>Turbines:</strong> ${props.turbines}</p>
                    <p><strong>Municipality:</strong> ${props.municipality}</p>
                    <p><strong>County:</strong> ${props.county}</p>
                    <a href="/PowerPlant/Details/${props.id}" class="btn btn-sm btn-info">Details</a>
                </div>
            `;
        }

        // Function to determine marker color based on status
        function getColor(status) {
            if (status === 'I drift') return '#28a745'; // Green for operational
            if (status === 'Under bygging') return '#ffc107'; // Yellow for under construction
            return '#007bff'; // Blue default
        }

        // Fetch GeoJSON data from our API endpoint
        fetch('/PowerPlant/GeoJson')
            .then(response => response.json())
            .then(data => {
                console.log('GeoJSON data received:', data);
                console.log('Features count:', data.features ? data.features.length : 0);

                // Add GeoJSON layer to map
                L.geoJSON(data, {
                    pointToLayer: function (feature, latlng) {
                        console.log('Processing feature:', feature);
                        return L.circleMarker(latlng, {
                            radius: 8,
                            fillColor: getColor(feature.properties.status),
                            color: '#000',
                            weight: 1,
                            opacity: 1,
                            fillOpacity: 0.8
                        });
                    },
                    onEachFeature: function (feature, layer) {
                        layer.bindPopup(createPopupContent(feature));
                    }
                }).addTo(map);
            })
            .catch(error => {
                console.error('Error loading GeoJSON data:', error);
                alert('Failed to load map data. Please try again later.');
            });

        // Test point
        var testPoint = {
            "type": "FeatureCollection",
            "features": [{
                "type": "Feature",
                "geometry": {
                    "type": "Point",
                    "coordinates": [10.7522, 59.9139]  // Oslo coordinates
                },
                "properties": {
                    "id": 999,
                    "name": "Test Power Plant",
                    "status": "I drift",
                    "effect": 100,
                    "municipality": "Oslo",
                    "county": "Oslo",
                    "turbines": 10
                }
            }]
        };

        // Add test point
        L.geoJSON(testPoint, {
            pointToLayer: function (feature, latlng) {
                console.log('Test point:', latlng);
                return L.circleMarker(latlng, {
                    radius: 8,
                    fillColor: '#FF0000',
                    color: '#000',
                    weight: 1,
                    opacity: 1,
                    fillOpacity: 0.8
                });
            },
            onEachFeature: function (feature, layer) {
                layer.bindPopup(createPopupContent(feature));
            }
        }).addTo(map);
    </script>
}